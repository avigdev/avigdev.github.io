* matlab discrete colorbar
  :PROPERTIES:
  :date:     2015/01/12 07:15:34
  :updated:  2015/01/12 16:28:40
  :categories: matlab,octave
  :END:
You shouldn't use the default "smooth" gradients of imagesc. The aesthetic side set aside, imagesc gives the wrong impression of an infinite resolution. While we are at it, let's get rid of the default nonesense y-axis opposite direction, and enable masking (whoaa. crazy.). 

verbose_disp is my version of disp/sprintf, combining the goods of both of them. You can safely remove these lines, or make up your own version of "verbosity" function. 

#+BEGIN_SRC matlab -n :exports code :eval never-export :session
% purpose : interface for imagesc for producing good 
% heat maps
% syntax : myimagesc(x,y,w,minval,maxval,bin,[mask],[flag_verbose])
% x,y = vectors, representing the range of x and y axis.
% w = typically, a  field which depends on both x and y.
% minval, maxval = first and last values of w  which are color coded.
% values of w which go beyond minval and maxval will be represented by the
% same colorcoding like minval and maxval
% bin - an interval of values of w which has a unique color coding
% mask - binary matrix for pixels that myimagesc grays out
% flag_verbose - work in verbose mode
% 
% dependencies : verbose_disp
% 
% see also: imagesc


% Copyright 2012 Avi Gozolchiani (http://tiny.cc/avigoz)
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.

% $Log$
function h=myimagesc(x,y,w,minval,maxval,bin,varargin)
%test case
% bin=1e4;minval=-8e4;maxval=8e4;
% x=0.1:0.1:100;
% y=0:200;
% [xx,yy]=ndgrid(x,y);
% w=sin(xx).*xx.^2.*exp(0.01*yy);
% w(:,195:198)=-70000;
% w(15:18,:)=70000;
% myimagesc(x,y,w,minval,maxval,bin)
accur=1e-6; % to avoid roundoff problems when interpolating the colormap
%% check the inputs
if(~isempty(nargchk(6,8,nargin)))
  error('esyntax : myimagesc(x,y,w,minval,maxval,bin,[mask],[flag_verbose])');
end
nxx=length(x);
nyy=length(y);
[nxw,nyw]=size(w);
if(nxx~=nxw || nyy~=nyw)
    error('dimension mismatch');
end % if(nxx~=nxw || nyy~=nyw)
if(minval>=maxval)
    error('minval>=maxval');
end % if(minval>=maxval)
if(bin>=(maxval-minval)/2.0)
    error('color range spans less than two colors');
end % if(bin>=(maxval-minval)/2.0)
mask=zeros(nxx,nyy);
flag_mask=false;
if(nargin>6)
    flag_mask=true;
    mask=varargin{1};
    if(~all([nxx,nyy]==size(mask)))
        error('mask dimension does not match the other matrices');
    end % if(~all([nxx,nyy]==size(mask)))
end % if(nargin>6)
%% parameters
flag_verbos=false;
if(nargin==8)
    flag_verbos=varargin{2};
end % if(nargin==8)
accur=1e-5;
%% prepare colormap
verbose_disp(flag_verbos,'myimagesc : prepare colormap');
colormap('default');
cmap=colormap;
n_origbins=size(cmap,1);
W_bins=minval:bin:maxval;
W_bins_ext=(minval-bin/2):bin:(maxval+(1+accur)*bin/2);
cscal=(minval:(maxval-minval)/(n_origbins-1):maxval)';
newcmap=interp1(cscal,cmap,W_bins);
newcmap=fix((newcmap-0.5)/accur-sign(newcmap))*accur+0.5; %take care that we don't get out of the [0,1] range
colormap(newcmap);
%% plot the heat map
verbose_disp(flag_verbos,'myimagesc : plot the heat map');
h=imagesc(x,y,w',W_bins_ext([1 length(W_bins_ext)]));hh=colorbar;grid on;
set(hh,'ytick',W_bins);
%% plot the mask, if necessary
verbose_disp(flag_verbos,'myimagesc : plot the mask, if necessary');
if(flag_mask)
    % see
    % http://blogs.mathworks.com/steve/2009/02/18/image-overlay-using-transparency/
    % for details
    gray_lev=0.5*ones(size(w')); % gray level for masking
    hold on;
    gray=cat(3,gray_lev,gray_lev,gray_lev);
    hh=imagesc(x,y,gray);
    hold off;
    set(hh,'alphadata',~mask');
end % if(flag_mask)
%% invert the y-axis
verbose_disp(flag_verbos,'myimagesc : invert the y-axis');
set(gca,'YDir','normal');
#+END_SRC
