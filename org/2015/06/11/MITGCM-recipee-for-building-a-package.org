* MITGCM recipee for building a package 
  :PROPERTIES:
  :categories: MITgcm
  :date:     2015/06/11 15:13:03
  :updated:  2015/06/11 16:00:50
  :END:
It is not easy to include a new functionality in a huge computer simulation such as [[http://mitgcm.org][MITgcm]], even if it is very modular and written with extensions in mind (and it is). So here is my experience with it. In the following, some of the replacements could be done on your local "code" directory, rather than on the root. The name of the example package is mypack.
** prepare an empty package that does nothing
the minimal list of files (which can be coppied, with necessary name changes of files/variables/parameters/functions, from MYPACKAGE) is:

#+BEGIN_EXAMPLE
mypack_calc.F
mypack_diagnostics_init.F
MYPACK_OPTIONS.h
MYPACK_PARAMS.h
MYPACK.h
mypack_output.F
mypack_routines.F
mypack_check.F
mypack_init_varia.F
mypack_readparms.F
#+END_EXAMPLE


their description :
|-----------------------------+--------------------------------------------------------------------|
| file                        | description                                                        |
|-----------------------------+--------------------------------------------------------------------|
| headers                     |                                                                    |
|-----------------------------+--------------------------------------------------------------------|
| MYPACK.h                    | define pkg variables, and their common blocks                      |
| MYPACK_OPTIONS.h           | package specific MACRO option defs                                 |
| MYPACK_PARAMS.h            | package parameters and their common block  (read from data.mypack) |
|-----------------------------+--------------------------------------------------------------------|
| code                        |                                                                    |
|-----------------------------+--------------------------------------------------------------------|
| mypack_calc.F              | interface for mitgcnuv (this is what the model's core calls)       |
| mypack_check.F             | check dependencies/conflicts with other packages                   |
| mypack_diagnostics_init.F | define diagnostics related to the package                          |
| mypack_init_varia.F       | initialize MYPACK parameters and variables                         |
| mypack_output.F            | create diagnostic outputs                                          |
| mypack_readparms.F         | parse data.mypack                                                  |
| mypack_routines.F          | routines that implement double diffusion parametrization schemes   |
|-----------------------------+--------------------------------------------------------------------|

they should be under a new directory of the rootdir (in mypack case ~/MITgcm/model/pkg/mypack )

the input file data.pkg should include the new entry "useMypack=.TRUE.," under the namelist "&PACKAGES"

this parameter should be declared (with the type =LOGICAL=), and included in the common block /PARM_PACKAGES/ under =~/MITgcm/model/inc/PARAMS.h= .  it should also be included under the namelist "PACKAGES" in =~/MITgcm/model/src/packages_boot.F= , and its default value should usually be declared in this file to be =.FALSE.=.

** parse user parameters

in =mypack_readparms= - create a separate NAMELIST for each namelist that should appear in =data.mypack= .
then give the parameters default values.  (e.g.       mypack_scheme    = 'kunze' )
then try to read them    (e.g.   "READ(UNIT=iUnit,NML=MYPACK_SCHEME,IOSTAT=errIO)" ) and monitor events where errIO<0 :

#+BEGIN_SRC fortran -n
      READ(UNIT=iUnit,NML=MYPACK_SCHEME,IOSTAT=errIO)
      IF ( errIO .LT. 0 ) THEN
       WRITE(msgBuf,'(A)')
     &  'S/R INI_PARMS'
       CALL PRINT_ERROR( msgBuf , 1)
       WRITE(msgBuf,'(A)')
     &  'Error reading numerical model '
       CALL PRINT_ERROR( msgBuf , 1)
       WRITE(msgBuf,'(A)')
     &  'parameter file "data.mypack"'
       CALL PRINT_ERROR( msgBuf , 1)
       WRITE(msgBuf,'(A)')
     &  'Problem in namelist MYPACK_SCHEME'
       CALL PRINT_ERROR( msgBuf , 1)
       STOP 'ABNORMAL END: S/R MYPACK_INIT'
      ENDIF

      CLOSE(iUnit)
#+END_SRC

finally tell =STDOUT.*= that you're finished
#+BEGIN_SRC fortran -n
      WRITE(msgBuf,'(A)') ' MYPACK_INIT: finished reading data.mypack'
#+END_SRC

declare these variables in =MYPACK_PARAMS.h=

these subroutines are run from the model file =packages_readparms.F=. these are the needed lines in =packages_readparms.F=:
#+BEGIN_SRC fortran -n
C--   Initialize Mypack parameters
      IF (useMypack) CALL MYPACK_READPARMS( myThid )
#endif
#+END_SRC
