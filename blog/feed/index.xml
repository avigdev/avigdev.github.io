<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Avi Gozolchiani אבי גוזולצני</title>
    <link>http://avigdev.github.io/blog</link>
    <description>Environmental Physics at Ben Gurion University</description>
    <pubDate>Thu, 19 Mar 2015 16:36:26 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Backups</title>
      <link>http://avigdev.github.io/blog/20150319/2015-03-19-backups-html</link>
      <pubDate>Thu, 19 Mar 2015 18:31:45 IST</pubDate>
      <category><![CDATA[mac]]></category>
      <category><![CDATA[linux]]></category>
      <guid isPermaLink="false">TwBC3qYlVvPCTaiKctBmsQ3uVZc=</guid>
      <description>Backups</description>
      <content:encoded><![CDATA[



<p>
Backuping should be - routine,automatic, and simple. I'm using the following: 
</p>

<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>rsync --force --ignore-errors --delete <span style="color: #8b2252;">\</span>
<span class="linenr">2: </span> --exclude /path/to/*excluded_files* <span style="color: #8b2252;">\</span>
<span class="linenr">3: </span> --backup-dir=<span style="color: #ff40ff;">`date +%Y-%m`</span> -avb /home/yourname/ <span style="color: #8b2252;">\</span>
<span class="linenr">4: </span> /path/to/your/BCK/hd
</pre>
</div>

<p>
Each month you get a new directory <code>YYYYmm</code> (year+month) on your backup hard drive, for files that have been changed/deleted during this month. You should probably delete it after a few months, but sometimes you will want to recover some data which was mistakenly deleted. Otherwise, all other files (which weren't deleted or modified) are just duplicated to the backup hd. 
</p>

<p>
If you are using linux, you should probably put this script in your <code>/etc/cron.daily/</code> directory. And give it the correct permissions.
</p>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/19/Backups.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>GMT pen attributes</title>
      <link>http://avigdev.github.io/blog/20150226/2015-02-26-gmt-pen-attributes-html</link>
      <pubDate>Thu, 26 Feb 2015 04:17:11 IST</pubDate>
      <category><![CDATA[gmt]]></category>
      <guid isPermaLink="false">_7kr3Z4xJljF4jQ34JcSo-rr_bE=</guid>
      <description>GMT pen attributes</description>
      <content:encoded><![CDATA[


<p>
A lot of GMT programs have flags with "<i>pen</i>" attributes. It is not very easy to find in the man pages or the pdf documentation what is a pen. So&#x2026; 
</p>

<p>
A pen is a comma separated triple parameter :
</p>
<pre class="example">
width,color,style
</pre>
<p>
where : 
</p>
<ul class="org-ul">
<li>width = faint default thinnest thinner thin thick thicker thickest fat fatter fattest obese
it can also be indicated in numbers in the range [0 18p]
</li>
<li>color = a gray shade in the range 0–255 (linearly going from black (0) to white (255)).
or RGB, by specifying r/g/b, each ranging from 0–255. Here 0/0/0 is black, 255/255/255 is white, 255/0/0 is red, etc.
or color Name. There are  663 valid color names. Use man gmtcolors to list all valid names. A very small yet versatile subset consists of the 29 choices white, black, and [light:|dark]{red, orange, yellow, green, cyan, blue, magenta, gray|grey, brown}. The color names are case-insensitive, so mixed upper and lower case can be used (like DarkGreen).
</li>
<li>style = solid, dashed, etc.
</li>
</ul>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/26/GMT-pen-attributes.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>A general slicing syntax</title>
      <link>http://avigdev.github.io/blog/20150219/2015-02-19-a-general-slicing-syntax-html</link>
      <pubDate>Thu, 19 Feb 2015 11:16:40 IST</pubDate>
      <category><![CDATA[matlab]]></category>
      <category><![CDATA[octave]]></category>
      <guid isPermaLink="false">nMaIR3r2XL7EoLy8YUEgd3nS6rc=</guid>
      <description>A general slicing syntax</description>
      <content:encoded><![CDATA[



<p>
To slice the 4th cross section of the second dimension of a 3-dimensional array in Matlab/Octave, you would use a code like : 
</p>
<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr">1: </span>z=z(<span style="color: #228b22;">:</span>,4,<span style="color: #228b22;">:</span>);
</pre>
</div>

<p>
If you want a bit more flexibility than that, you can have the sliced dimension as a parameter, using <a href="http://www.mathworks.com/help/matlab/ref/subsref.html">subsref</a> : 
</p>

<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr">1: </span>dim=2;
<span class="linenr">2: </span>idx.type=<span style="color: #8b2252;">'()'</span>;               
<span class="linenr">3: </span>idx.subs={<span style="color: #8b2252;">':'</span>,<span style="color: #8b2252;">':'</span>,<span style="color: #8b2252;">':'</span>};
<span class="linenr">4: </span>idx.subs{dim}=4;
<span class="linenr">5: </span>z=subsref(z,idx);
</pre>
</div>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/19/A-general-slicing-syntax.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>save a plot in png, eps, and fig formats</title>
      <link>http://avigdev.github.io/blog/20150212/2015-02-12-save-a-plot-in-png-eps-and-fig-formats-html</link>
      <pubDate>Thu, 12 Feb 2015 01:07:53 IST</pubDate>
      <category><![CDATA[matlab]]></category>
      <category><![CDATA[octave]]></category>
      <category><![CDATA[workflow]]></category>
      <guid isPermaLink="false">XsgIuVpSxa0VS4Ttmq5eF07Wryc=</guid>
      <description>save a plot in png, eps, and fig formats</description>
      <content:encoded><![CDATA[



<p>
When you save a figure, what you really want to save is - several formats, a fig file, all relevant data that is needed to reconstruct the fig, and a README that tells you what is there. That's the purpose of my savefigs : 
</p>

<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr"> 1: </span><span style="color: #b22222;">% purpose : save a figure in png,eps, and fig formats</span>
<span class="linenr"> 2: </span><span style="color: #b22222;">% syntax : savefigs(filename,readme_text,data_str)</span>
<span class="linenr"> 3: </span><span style="color: #b22222;">% filename - file name without any suffix (savefigs does not check this, so</span>
<span class="linenr"> 4: </span><span style="color: #b22222;">% if you mistakenly set filename="stam.fig", the output files will </span>
<span class="linenr"> 5: </span><span style="color: #b22222;">% be stam.fig.fig, stam.fig.eps, stam.fig.png)</span>
<span class="linenr"> 6: </span><span style="color: #b22222;">% readme_text - a string that describes the figure, and the data.</span>
<span class="linenr"> 7: </span><span style="color: #b22222;">% data_str - a data structure that contains all needed info in</span>
<span class="linenr"> 8: </span><span style="color: #b22222;">% order to reconstruct the figure</span>
<span class="linenr"> 9: </span><span style="color: #b22222;">% </span>
<span class="linenr">10: </span><span style="color: #b22222;">% see also: print, hgsave</span>
<span class="linenr">11: </span>
<span class="linenr">12: </span>
<span class="linenr">13: </span><span style="color: #b22222;">% Copyright 2013 Avi Gozolchiani (http://tiny.cc/avigoz)</span>
<span class="linenr">14: </span><span style="color: #b22222;">% This program is free software: you can redistribute it and/or modify</span>
<span class="linenr">15: </span><span style="color: #b22222;">% it under the terms of the GNU General Public License as published by</span>
<span class="linenr">16: </span><span style="color: #b22222;">% the Free Software Foundation, either version 3 of the License, or</span>
<span class="linenr">17: </span><span style="color: #b22222;">% (at your option) any later version.</span>
<span class="linenr">18: </span><span style="color: #b22222;">%</span>
<span class="linenr">19: </span><span style="color: #b22222;">% This program is distributed in the hope that it will be useful,</span>
<span class="linenr">20: </span><span style="color: #b22222;">% but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="linenr">21: </span><span style="color: #b22222;">% </span><span style="color: #008b8b;">MERCHANTABILITY </span><span style="color: #b22222;">or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="linenr">22: </span><span style="color: #b22222;">% </span><span style="color: #008b8b;">GNU </span><span style="color: #b22222;">General Public License for more details.</span>
<span class="linenr">23: </span><span style="color: #b22222;">%</span>
<span class="linenr">24: </span><span style="color: #b22222;">% You should have received a copy of the GNU General Public License</span>
<span class="linenr">25: </span><span style="color: #b22222;">% along with this program.  If not, see &lt;<a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;.</span>
<span class="linenr">26: </span>
<span class="linenr">27: </span><span style="color: #b22222;">% $Log$</span>
<span class="linenr">28: </span><span style="color: #932092;">function</span> <span style="color: #0000ff;">savefigs</span>(<span style="color: #a0522d;">filename</span>,<span style="color: #a0522d;">readme_text</span>,<span style="color: #a0522d;">data_str</span>)
<span class="linenr">29: </span>isoctave=(exist(<span style="color: #8b2252;">'OCTAVE_VERSION'</span>,<span style="color: #8b2252;">'builtin'</span>)<span style="color: #228b22;">~=</span>0);
<span class="linenr">30: </span><span style="color: #932092;">if</span>(isoctave)
<span class="linenr">31: </span>    prints=struct(<span style="color: #8b2252;">'suff'</span>,{<span style="color: #8b2252;">'png'</span>,<span style="color: #8b2252;">'eps'</span>},<span style="text-decoration: underline;">...</span>
<span class="linenr">32: </span>                  <span style="color: #8b2252;">'func'</span>,{@(x)print(<span style="color: #8b2252;">'-dpng'</span>,x),@(x)print(<span style="color: #8b2252;">'-depsc2'</span>,x)});    
<span class="linenr">33: </span><span style="color: #932092;">else</span>
<span class="linenr">34: </span>    prints=struct(<span style="color: #8b2252;">'suff'</span>,{<span style="color: #8b2252;">'png'</span>,<span style="color: #8b2252;">'eps'</span>,<span style="color: #8b2252;">'fig'</span>},<span style="text-decoration: underline;">...</span>
<span class="linenr">35: </span>                  <span style="color: #8b2252;">'func'</span>,{@(x)print(<span style="color: #8b2252;">'-dpng'</span>,x),@(x)print(<span style="color: #8b2252;">'-depsc2'</span>,x), <span style="text-decoration: underline;">...</span>
<span class="linenr">36: </span>                        @hgsave});
<span class="linenr">37: </span><span style="color: #932092;">end</span>
<span class="linenr">38: </span>n_printfuncs=length(prints);
<span class="linenr">39: </span><span style="color: #932092;">for</span> <span style="color: #a0522d;">i_printfunc</span>=<span style="color: #008b8b;">1:n_printfuncs </span><span style="color: #b22222;">% fig,png, and eps files</span>
<span class="linenr">40: </span>    prints(i_printfunc).func([filename,<span style="color: #8b2252;">'.'</span>,prints(i_printfunc).suff]);
<span class="linenr">41: </span><span style="color: #932092;">end</span> <span style="color: #b22222;">% for </span><span style="color: #b22222;">i_printfunc</span><span style="color: #b22222;">=</span><span style="color: #b22222;">1:n_printfuncs</span>
<span class="linenr">42: </span><span style="color: #b22222;">% document what is it</span>
<span class="linenr">43: </span>fid=fopen([filename,<span style="color: #8b2252;">'_README'</span>,<span style="color: #8b2252;">'.txt'</span>],<span style="color: #8b2252;">'wt'</span>);
<span class="linenr">44: </span>fprintf(fid,<span style="color: #8b2252;">'%s'</span>,readme_text);
<span class="linenr">45: </span>fclose(fid);
<span class="linenr">46: </span><span style="color: #b22222;">% save the vector/matrix for future crunching</span>
<span class="linenr">47: </span>save([filename,<span style="color: #8b2252;">'_data'</span>,<span style="color: #8b2252;">'.mat'</span>],<span style="color: #8b2252;">'data_str'</span>);
</pre>
</div>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/12/save-a-plot-in-png,-eps,-and-fig-formats.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Regridding unequally spaced sampled field, and plotting an imagesc</title>
      <link>http://avigdev.github.io/blog/20150207/2015-02-07-regridding-unequally-spaced-sampled-field-and-plotting-an-imagesc-html</link>
      <pubDate>Sat, 07 Feb 2015 18:48:28 IST</pubDate>
      <category><![CDATA[matlab]]></category>
      <category><![CDATA[octave]]></category>
      <guid isPermaLink="false">DNq7eTPjZkbzZFojKkbTuvx7EMs=</guid>
      <description>Regridding unequally spaced sampled field, and plotting an imagesc</description>
      <content:encoded><![CDATA[



<p>
In <a href="http://avigdev.github.io/blog/20150112/2015-01-12-matlab-discrete-colorbar-html/">a previous post</a> we discussed a better way for using imagesc, with a more sane colormap. Let's now speak about the grid. Imagesc will happily embed every xy-axis you plug in, without checking whether dimensions fit. If your grid is non-equally spaced - it will just draw the z-axis on a regular axis (i.e. ignoring the xy input), and show the xy-axes as if they genuinely represent the input. My conclusion from this wild behavior is - never use imagesc on non-equally spaced data. Matlab has nice interpolant interfaces to help you get your data equally gridded. 
</p>

<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr">1: </span>[x1,y1]=ndgrid(x,y); <span style="color: #b22222;">% this step is actually not crucial</span>
<span class="linenr">2: </span>I = griddedInterpolant(x1,y1,z);  
<span class="linenr">3: </span>x1 = linspace(min(x),max(x),5);     <span style="color: #b22222;">% Define an equally spaced grid</span>
<span class="linenr">4: </span>y1 = linspace(min(y),max(y),5);
<span class="linenr">5: </span>[x1,y1]=ndgrid(x1,y1);
<span class="linenr">6: </span>z1=I(x1,y1);
<span class="linenr">7: </span>myimagesc(x1(1,<span style="color: #228b22;">:</span>),y1(<span style="color: #228b22;">:</span>,1),z1,0.55,0.95,0.05);
</pre>
</div>

<p>
Where your input parameters to <a href="http://avigdev.github.io/blog/20150112/2015-01-12-matlab-discrete-colorbar-html/">myimagesc</a> may vary, and you could replace "5" by whatever division of the equally spaced grids you fancy. 
</p>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/07/Regridding-unequally-spaced-sampled-field,-and-plotting-an-imagesc.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Screen - unique logs for each run</title>
      <link>http://avigdev.github.io/blog/20150129/2015-01-29-screen-unique-logs-for-each-run-html</link>
      <pubDate>Thu, 29 Jan 2015 01:58:34 IST</pubDate>
      <category><![CDATA[workflow]]></category>
      <category><![CDATA[linux]]></category>
      <guid isPermaLink="false">vpBKA-t7LRD5Pg0PplXTC_Rxa48=</guid>
      <description>Screen - unique logs for each run</description>
      <content:encoded><![CDATA[



<p>
<a href="https://wiki.archlinux.org/index.php/GNU_Screen">Screen</a> is a little wrap around linux shell that enables detaching and logging out while the session you created is still running. It could be used for lots of different purposes, and running an intensive computation on a remote computer is an obvious example.
</p>

<p>
You would normally do :
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>screen -md -L -S session_name your_program
</pre>
</div>

<p>
-md = detach immediately after running, and return to the current terminal session
-L = create a log file
-S = create meaningful name for your session
</p>

<p>
To check the stat of your sessions you will use:
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>screen -ls
</pre>
</div>

<p>
To have different log files with unique names for different sessions, you need to create a <code>~/.screenrc</code> file, with the following single line
</p>
<pre class="example">
logfile screenlog-%Y%m%d-%c:%s
</pre>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/29/Screen---unique-logs-for-each-run.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Consistent Latex units in non italics</title>
      <link>http://avigdev.github.io/blog/20150127/2015-01-27-consistent-latex-units-in-non-italics-html</link>
      <pubDate>Tue, 27 Jan 2015 19:23:23 IST</pubDate>
      <category><![CDATA[latex]]></category>
      <guid isPermaLink="false">EweFAep8SEIgcJoTKBebpuPnX1s=</guid>
      <description>Consistent Latex units in non italics</description>
      <content:encoded><![CDATA[



<p>
Yet another latex tidbit. Its purpose - remove <i>italics</i> from the units inside math mode.
</p>

<p>
in the header :
</p>
<div class="org-src-container">

<pre class="src src-latex"><span class="linenr">1: </span><span style="color: #932092;">\newcommand</span>{<span style="color: #0000ff;">\unit</span>}[1]{<span style="color: #932092;">\ensuremath</span>{<span style="color: #932092;">\,</span> <span style="color: #932092;">\mathrm</span>{#1}}}
</pre>
</div>

<p>
in the body :
</p>
<div class="org-src-container">

<pre class="src src-latex"><span class="linenr">1: </span><span style="color: #8b2252;">$\tau=0.0257\left[\unit{N\cdot m^</span><span style="color: #8b2252;">{-2}</span><span style="color: #8b2252;">}\right]$</span>
</pre>
</div>

<p>
If you want to take this approach to the very extreme, you could have the units of every var defined in the header : 
</p>
<div class="org-src-container">

<pre class="src src-latex"><span class="linenr">1: </span><span style="color: #932092;">\newcommand</span>{<span style="color: #0000ff;">\tauunit</span>}{<span style="color: #932092;">\unit</span>{N}<span style="color: #932092;">\cdot\unit</span>{m}^{-2}}
</pre>
</div>

<p>
And use them consistently without silly unit mistakes inside your manuscript : 
</p>
<div class="org-src-container">

<pre class="src src-latex"><span class="linenr">1: </span><span style="color: #8b2252;">$\tau=0.4\tauunit$</span>
</pre>
</div>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/27/Consistent-Latex-units-in-non-italics.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Xmgr annotations</title>
      <link>http://avigdev.github.io/blog/20150127/2015-01-27-xmgr-annotations-html</link>
      <pubDate>Tue, 27 Jan 2015 00:32:07 IST</pubDate>
      <category><![CDATA[xmgr]]></category>
      <guid isPermaLink="false">2YkhVWPDoUjtAoG71pdRXyBOrxs=</guid>
      <description>Xmgr annotations</description>
      <content:encoded><![CDATA[



<p>
Frankly, I think that <a href="http://plasma-gate.weizmann.ac.il/Grace/">xmgr</a> is obsolete. It had some grace (pun intended) 10yrs ago, and it still produces very consistent graphs. But it smells like an old cheese, it lacks latex/regexps/modern scripting language/importing of modern binary formats/2D heat maps. Nevertheless, if I happen to have an ascii data file around, I am still tempted to launch it once in every while. <a href="http://gmt.soest.hawaii.edu">GMT</a> will take you further, but xmgr will take you faster (once you get the hang of its awkward arrangement of menus).
</p>

<p>
<a href="http://blog.louic.nl/?p=249">This guy</a> summarizes for us some of the very basic subtleties of xmgr's gui. The most important for me are related to special chars:
</p>


<p>
The old way of including special chars/fonts :
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">What</th>
<th scope="col" class="left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">superscript</td>
<td class="left"><code>x\S2\N</code></td>
</tr>

<tr>
<td class="left">Subscript</td>
<td class="left"><code>3\s10\N</code></td>
</tr>

<tr>
<td class="left">Greek letters (e.g. theta)</td>
<td class="left"><code>\f{Symbol}q\f{}</code></td>
</tr>

<tr>
<td class="left">Special symbols (e.g. Angstrom symbol)</td>
<td class="left"><code>\cE\C</code></td>
</tr>
</tbody>
</table>

<p>
The new method to insert special characters in xmgrace is:
</p>

<p>
Press ctrl-e while positioned in a text-edit field to bring up the font dialog box, and select whatever you want.
</p>

<p>
Thanks <a href="http://blog.louic.nl/">Louic</a> . 
</p>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/27/Xmgr-annotations.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>The best of all worlds - disp + sprintf</title>
      <link>http://avigdev.github.io/blog/20150125/2015-01-25-the-best-of-all-worlds-disp-+-sprintf-html</link>
      <pubDate>Sun, 25 Jan 2015 20:30:03 IST</pubDate>
      <category><![CDATA[matlab]]></category>
      <category><![CDATA[octave]]></category>
      <guid isPermaLink="false">d2UuAV-apLfltqqjZVSY5wGNKmM=</guid>
      <description>The best of all worlds - disp + sprintf</description>
      <content:encoded><![CDATA[



<p>
Going through loops you would often find yourself writing something ugly like : 
</p>
<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr">1: </span>n=10;
<span class="linenr">2: </span>is_verbose=true;
<span class="linenr">3: </span><span style="color: #932092;">for</span> <span style="color: #a0522d;">i</span>=<span style="color: #008b8b;">1:n</span>
<span class="linenr">4: </span> <span style="color: #932092;">if</span>(is_verbose)
<span class="linenr">5: </span>  disp(sprintf(<span style="color: #8b2252;">'DBG: %d/%d'</span>,<span style="color: #008b8b;">i</span>,n));
<span class="linenr">6: </span> <span style="color: #932092;">end</span>
<span class="linenr">7: </span>  <span style="color: #b22222;">% some interesting stuff here....</span>
<span class="linenr">8: </span><span style="color: #932092;">end</span>
</pre>
</div>

<pre class="example">
&gt;&gt; &gt;&gt; DBG: 1/10
DBG: 2/10
DBG: 3/10
DBG: 4/10
DBG: 5/10
DBG: 6/10
DBG: 7/10
DBG: 8/10
DBG: 9/10
DBG: 10/10
&gt;&gt;
</pre>

<p>
While, if you had disp and sprintf combined, you could have written a beautiful code like this : 
</p>
<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr">1: </span>is_verbose=true;
<span class="linenr">2: </span>n=10;
<span class="linenr">3: </span><span style="color: #932092;">for</span> <span style="color: #a0522d;">i</span>=<span style="color: #008b8b;">1:n</span>
<span class="linenr">4: </span> verbose_disp(is_verbose,<span style="color: #8b2252;">'DBG: %d/%d'</span>,<span style="color: #008b8b;">i</span>,n);
<span class="linenr">5: </span> <span style="color: #b22222;">% some interesting stuff here....</span>
<span class="linenr">6: </span><span style="color: #932092;">end</span>
</pre>
</div>

<p>
Thanks to Matlab's <i>varargin</i> this little gem could be very close to <i>sprintf</i> in syntax. 
</p>
<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr"> 1: </span><span style="color: #b22222;">% purpose display only if the script is in verbose mode + include sprintf </span>
<span class="linenr"> 2: </span><span style="color: #b22222;">% capabilities in disp.</span>
<span class="linenr"> 3: </span><span style="color: #b22222;">% syntax : verbose_disp(flag_verb,form,[variable_list])</span>
<span class="linenr"> 4: </span><span style="color: #b22222;">% flag_verb=1 if you want to display, and 0 if you don't want to</span>
<span class="linenr"> 5: </span><span style="color: #b22222;">% display</span>
<span class="linenr"> 6: </span><span style="color: #b22222;">% form = string including formatting directions for sprintf </span>
<span class="linenr"> 7: </span><span style="color: #b22222;">% variable_list = more parameters which include variables fitting</span>
<span class="linenr"> 8: </span><span style="color: #b22222;">% into the format "form".</span>
<span class="linenr"> 9: </span><span style="color: #b22222;">%</span>
<span class="linenr">10: </span><span style="color: #b22222;">% see also : disp, sprintf</span>
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #b22222;">% Copyright 2013 Avi Gozolchiani (http://tiny.cc/avigoz)</span>
<span class="linenr">13: </span><span style="color: #b22222;">% This program is free software: you can redistribute it and/or modify</span>
<span class="linenr">14: </span><span style="color: #b22222;">% it under the terms of the GNU General Public License as published by</span>
<span class="linenr">15: </span><span style="color: #b22222;">% the Free Software Foundation, either version 3 of the License, or</span>
<span class="linenr">16: </span><span style="color: #b22222;">% (at your option) any later version.</span>
<span class="linenr">17: </span><span style="color: #b22222;">%</span>
<span class="linenr">18: </span><span style="color: #b22222;">% This program is distributed in the hope that it will be useful,</span>
<span class="linenr">19: </span><span style="color: #b22222;">% but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="linenr">20: </span><span style="color: #b22222;">% </span><span style="color: #008b8b;">MERCHANTABILITY </span><span style="color: #b22222;">or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="linenr">21: </span><span style="color: #b22222;">% </span><span style="color: #008b8b;">GNU </span><span style="color: #b22222;">General Public License for more details.</span>
<span class="linenr">22: </span><span style="color: #b22222;">%</span>
<span class="linenr">23: </span><span style="color: #b22222;">% You should have received a copy of the GNU General Public License</span>
<span class="linenr">24: </span><span style="color: #b22222;">% along with this program.  If not, see &lt;<a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;.</span>
<span class="linenr">25: </span>
<span class="linenr">26: </span><span style="color: #b22222;">% $Log$</span>
<span class="linenr">27: </span><span style="color: #932092;">function</span> <span style="color: #0000ff;">verbose_disp</span>(<span style="color: #a0522d;">flag_verb</span>,<span style="color: #a0522d;">form</span>,<span style="color: #a0522d;">varargin</span>)
<span class="linenr">28: </span><span style="color: #b22222;">% little input checking</span>
<span class="linenr">29: </span><span style="color: #932092;">if</span>(nargin<span style="color: #228b22;">&lt;</span>2)
<span class="linenr">30: </span>    error(<span style="color: #8b2252;">'verbose_disp : wrong number of arguments'</span>);
<span class="linenr">31: </span><span style="color: #932092;">end</span>                                     <span style="color: #b22222;">% if(nargin&lt;2)</span>
<span class="linenr">32: </span><span style="color: #932092;">if</span>(<span style="color: #228b22;">~</span>ischar(form))
<span class="linenr">33: </span>    error(<span style="color: #8b2252;">'second argument should be a character string'</span>);
<span class="linenr">34: </span><span style="color: #932092;">end</span>                                 <span style="color: #b22222;">% if(~ischar(form))</span>
<span class="linenr">35: </span><span style="color: #b22222;">% if mode=verbose display the formatted string</span>
<span class="linenr">36: </span><span style="color: #932092;">if</span>(flag_verb)
<span class="linenr">37: </span>  s=sprintf(form,varargin{<span style="color: #228b22;">:</span>});
<span class="linenr">38: </span>  disp(s);
<span class="linenr">39: </span><span style="color: #932092;">end</span> <span style="color: #b22222;">% if(flag_verb)</span>
</pre>
</div>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/25/The-best-of-all-worlds---disp-+-sprintf.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>linux copy to clipboard</title>
      <link>http://avigdev.github.io/blog/20150119/2015-01-19-linux-copy-to-clipboard-html</link>
      <pubDate>Mon, 19 Jan 2015 00:08:45 IST</pubDate>
      <category><![CDATA[alias]]></category>
      <category><![CDATA[workflow]]></category>
      <category><![CDATA[osx]]></category>
      <category><![CDATA[linux]]></category>
      <guid isPermaLink="false">txTu7dBha0I3ckwFYdxR3_51Z7I=</guid>
      <description>linux copy to clipboard</description>
      <content:encoded><![CDATA[



<p>
Is it true that you have to give names to things to really appreciate and understand them? It's really one of these questions that are just too gross for answering a straight yes or no. 
</p>

<p>
When you think of this question, math comes to mind. I have little doubt that you must internalize dozens of definitions and the relations between them before you master differential geometry, or group theory. But do you need language to understand subtraction? The answer is - <a href="http://ocw.mit.edu/courses/brain-and-cognitive-sciences/9-00-introduction-to-psychology-fall-2004/lecture-notes/9-cognitive-development-how-do-children-think/">NO</a> . Babies do it intuitively. So there is some border beyond which things become too abstract, and we've got to give them names. But isn't my answer a tautology? Isn't "abstract" just the name of this phenomena of having to name something in order to understand it? Sure enough, if we were not so used to giving names to everything, we would have found lots of things "abstract". Helen Keller <a href="http://digital.library.upenn.edu/women/keller/life/life.html">writes</a> :
</p>

<p class="verse">
"my teacher placed my hand under the spout. As the cool stream gushed over one hand she spelled into the other the word water, first slowly, then rapidly. I stood still, my whole attention fixed upon the motions of her fingers. Suddenly I felt a misty consciousness as of something forgotten - a thrill of returning thought; and somehow the mystery of language was revealed to me. I knew then that "w-a-t-e-r" meant the wonderful cool something that was flowing over my hand"<br  />
</p>

<p>
Most of us don't think of the notion of water as abstract, but it's just a matter of experience. 
</p>

<p>
SO&#x2026; It didn't occur to me that I need to copy linux outputs to the clipboard, until I found out about xclip (keep your comments about the long intro to yourself, by the way&#x2026;). Now that I know about it, I also care about cases where I want the trailing '\n', and cases where I don't.
</p>

<p>
Here are my aliases for linux:
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xc</span>=<span style="color: #8b2252;">'xclip -selection clipboard'</span>
<span class="linenr">2: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xcn</span>=<span style="color: #8b2252;">'perl -ne "chomp();print" |xclip -selection clipboard'</span>
</pre>
</div>

<p>
And here they are for mac osx : 
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xc</span>=<span style="color: #8b2252;">"pbcopy"</span>
<span class="linenr">2: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xcn</span>=<span style="color: #8b2252;">"tr -d '\n' | pbcopy"</span>
</pre>
</div>

<p>
The two approaches for removing the newlines work equivalently on both systems.
</p>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/19/linux-copy-to-clipboard.org">org-mode source</a><p>]]></content:encoded>
    </item>
  </channel>
</rss>
