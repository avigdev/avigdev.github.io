<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">Avi Gozolchiani אבי גוזולצני</title>
  <subtitle type="text">Environmental Physics at Ben Gurion University</subtitle>

  <updated>2015-01-28T23:58:41Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog" />
  <id>http://avigdev.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://avigdev.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Screen - unique logs for each run]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150129/2015-01-29-screen-unique-logs-for-each-run-html" />
    <id>http://avigdev.github.io/blog/20150129/2015-01-29-screen-unique-logs-for-each-run-html</id>
    <updated>2015-01-29T01:58:34Z</updated>
    <published>2015-01-29T01:58:34Z</published>
    <category scheme="http://avigdev.github.io/blog" term="workflow" />
    <category scheme="http://avigdev.github.io/blog" term="linux" />
    <summary type="html"><![CDATA[Screen - unique logs for each run]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150129/2015-01-29-screen-unique-logs-for-each-run-html"><![CDATA[



<p>
<a href="https://wiki.archlinux.org/index.php/GNU_Screen">Screen</a> is a little wrap around linux shell that enables detaching and logging out while the session you created is still running. It could be used for lots of different purposes, and running an intensive computation on a remote computer is an obvious example.
</p>

<p>
You would normally do :
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>screen -md -L -S session_name your_program
</pre>
</div>

<p>
-md = detach immediately after running, and return to the current terminal session
-L = create a log file
-S = create meaningful name for your session
</p>

<p>
To check the stat of your sessions you will use:
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>screen -ls
</pre>
</div>

<p>
To have different log files with unique names for different sessions, you need to create a <code>~/.screenrc</code> file, with the following single line
</p>
<pre class="example">
logfile screenlog-%Y%m%d-%c:%s
</pre>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/29/Screen---unique-logs-for-each-run.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Consistent Latex units in non italics]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150127/2015-01-27-consistent-latex-units-in-non-italics-html" />
    <id>http://avigdev.github.io/blog/20150127/2015-01-27-consistent-latex-units-in-non-italics-html</id>
    <updated>2015-01-27T19:24:35Z</updated>
    <published>2015-01-27T19:23:23Z</published>
    <category scheme="http://avigdev.github.io/blog" term="latex" />
    <summary type="html"><![CDATA[Consistent Latex units in non italics]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150127/2015-01-27-consistent-latex-units-in-non-italics-html"><![CDATA[



<p>
Yet another latex tidbit. Its purpose - remove <i>italics</i> from the units inside math mode.
</p>

<p>
in the header :
</p>
<div class="org-src-container">

<pre class="src src-latex"><span class="linenr">1: </span><span style="color: #932092;">\newcommand</span>{<span style="color: #0000ff;">\unit</span>}[1]{<span style="color: #932092;">\ensuremath</span>{<span style="color: #932092;">\,</span> <span style="color: #932092;">\mathrm</span>{#1}}}
</pre>
</div>

<p>
in the body :
</p>
<div class="org-src-container">

<pre class="src src-latex"><span class="linenr">1: </span><span style="color: #8b2252;">$\tau=0.0257\left[\unit{N\cdot m^</span><span style="color: #8b2252;">{-2}</span><span style="color: #8b2252;">}\right]$</span>
</pre>
</div>

<p>
If you want to take this approach to the very extreme, you could have the units of every var defined in the header : 
</p>
<div class="org-src-container">

<pre class="src src-latex"><span class="linenr">1: </span><span style="color: #932092;">\newcommand</span>{<span style="color: #0000ff;">\tauunit</span>}{<span style="color: #932092;">\unit</span>{N}<span style="color: #932092;">\cdot\unit</span>{m}^{-2}}
</pre>
</div>

<p>
And use them consistently without silly unit mistakes inside your manuscript : 
</p>
<div class="org-src-container">

<pre class="src src-latex"><span class="linenr">1: </span><span style="color: #8b2252;">$\tau=0.4\tauunit$</span>
</pre>
</div>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/27/Consistent-Latex-units-in-non-italics.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Xmgr annotations]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150127/2015-01-27-xmgr-annotations-html" />
    <id>http://avigdev.github.io/blog/20150127/2015-01-27-xmgr-annotations-html</id>
    <updated>2015-01-27T00:40:33Z</updated>
    <published>2015-01-27T00:32:07Z</published>
    <category scheme="http://avigdev.github.io/blog" term="xmgr" />
    <summary type="html"><![CDATA[Xmgr annotations]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150127/2015-01-27-xmgr-annotations-html"><![CDATA[



<p>
Frankly, I think that <a href="http://plasma-gate.weizmann.ac.il/Grace/">xmgr</a> is obsolete. It had some grace (pun intended) 10yrs ago, and it still produces very consistent graphs. But it smells like an old cheese, it lacks latex/regexps/modern scripting language/importing of modern binary formats/2D heat maps. Nevertheless, if I happen to have an ascii data file around, I am still tempted to launch it once in every while. <a href="http://gmt.soest.hawaii.edu">GMT</a> will take you further, but xmgr will take you faster (once you get the hang of its awkward arrangement of menus).
</p>

<p>
<a href="http://blog.louic.nl/?p=249">This guy</a> summarizes for us some of the very basic subtleties of xmgr's gui. The most important for me are related to special chars:
</p>


<p>
The old way of including special chars/fonts :
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">What</th>
<th scope="col" class="left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">superscript</td>
<td class="left"><code>x\S2\N</code></td>
</tr>

<tr>
<td class="left">Subscript</td>
<td class="left"><code>3\s10\N</code></td>
</tr>

<tr>
<td class="left">Greek letters (e.g. theta)</td>
<td class="left"><code>\f{Symbol}q\f{}</code></td>
</tr>

<tr>
<td class="left">Special symbols (e.g. Angstrom symbol)</td>
<td class="left"><code>\cE\C</code></td>
</tr>
</tbody>
</table>

<p>
The new method to insert special characters in xmgrace is:
</p>

<p>
Press ctrl-e while positioned in a text-edit field to bring up the font dialog box, and select whatever you want.
</p>

<p>
Thanks <a href="http://blog.louic.nl/">Louic</a> . 
</p>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/27/Xmgr-annotations.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[The best of all worlds - disp + sprintf]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150125/2015-01-25-the-best-of-all-worlds-disp-+-sprintf-html" />
    <id>http://avigdev.github.io/blog/20150125/2015-01-25-the-best-of-all-worlds-disp-+-sprintf-html</id>
    <updated>2015-01-25T20:36:06Z</updated>
    <published>2015-01-25T20:30:03Z</published>
    <category scheme="http://avigdev.github.io/blog" term="matlab" />
    <category scheme="http://avigdev.github.io/blog" term="octave" />
    <summary type="html"><![CDATA[The best of all worlds - disp + sprintf]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150125/2015-01-25-the-best-of-all-worlds-disp-+-sprintf-html"><![CDATA[



<p>
Going through loops you would often find yourself writing something ugly like : 
</p>
<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr">1: </span>n=10;
<span class="linenr">2: </span>is_verbose=true;
<span class="linenr">3: </span><span style="color: #932092;">if</span>(is_verbose)
<span class="linenr">4: </span> <span style="color: #932092;">for</span> <span style="color: #a0522d;">i</span>=<span style="color: #008b8b;">1:n</span>
<span class="linenr">5: </span>  disp(sprintf(<span style="color: #8b2252;">'DBG: %d/%d'</span>,<span style="color: #008b8b;">i</span>,n));
<span class="linenr">6: </span>  <span style="color: #b22222;">% some interesting stuff here....</span>
<span class="linenr">7: </span> <span style="color: #932092;">end</span>
<span class="linenr">8: </span><span style="color: #932092;">end</span>
</pre>
</div>

<pre class="example">
&gt;&gt; &gt;&gt; DBG: 1/10
DBG: 2/10
DBG: 3/10
DBG: 4/10
DBG: 5/10
DBG: 6/10
DBG: 7/10
DBG: 8/10
DBG: 9/10
DBG: 10/10
&gt;&gt;
</pre>

<p>
While, if you had disp and sprintf combined, you could have written a beautiful code like this : 
</p>
<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr">1: </span>is_verbose=true;
<span class="linenr">2: </span>n=10;
<span class="linenr">3: </span><span style="color: #932092;">for</span> <span style="color: #a0522d;">i</span>=<span style="color: #008b8b;">1:n</span>
<span class="linenr">4: </span> verbose_disp(is_verbose,<span style="color: #8b2252;">'DBG: %d/%d'</span>,<span style="color: #008b8b;">i</span>,n);
<span class="linenr">5: </span> <span style="color: #b22222;">% some interesting stuff here....</span>
<span class="linenr">6: </span><span style="color: #932092;">end</span>
</pre>
</div>

<p>
Thanks to Matlab's <i>varargin</i> this little gem could be very close to <i>sprintf</i> in syntax. 
</p>
<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr"> 1: </span><span style="color: #b22222;">% purpose display only if the script is in verbose mode + include sprintf </span>
<span class="linenr"> 2: </span><span style="color: #b22222;">% capabilities in disp.</span>
<span class="linenr"> 3: </span><span style="color: #b22222;">% syntax : verbose_disp(flag_verb,form,[variable_list])</span>
<span class="linenr"> 4: </span><span style="color: #b22222;">% flag_verb=1 if you want to display, and 0 if you don't want to</span>
<span class="linenr"> 5: </span><span style="color: #b22222;">% display</span>
<span class="linenr"> 6: </span><span style="color: #b22222;">% form = string including formatting directions for sprintf </span>
<span class="linenr"> 7: </span><span style="color: #b22222;">% variable_list = more parameters which include variables fitting</span>
<span class="linenr"> 8: </span><span style="color: #b22222;">% into the format "form".</span>
<span class="linenr"> 9: </span><span style="color: #b22222;">%</span>
<span class="linenr">10: </span><span style="color: #b22222;">% see also : disp, sprintf</span>
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #b22222;">% Copyright 2013 Avi Gozolchiani (http://tiny.cc/avigoz)</span>
<span class="linenr">13: </span><span style="color: #b22222;">% This program is free software: you can redistribute it and/or modify</span>
<span class="linenr">14: </span><span style="color: #b22222;">% it under the terms of the GNU General Public License as published by</span>
<span class="linenr">15: </span><span style="color: #b22222;">% the Free Software Foundation, either version 3 of the License, or</span>
<span class="linenr">16: </span><span style="color: #b22222;">% (at your option) any later version.</span>
<span class="linenr">17: </span><span style="color: #b22222;">%</span>
<span class="linenr">18: </span><span style="color: #b22222;">% This program is distributed in the hope that it will be useful,</span>
<span class="linenr">19: </span><span style="color: #b22222;">% but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="linenr">20: </span><span style="color: #b22222;">% </span><span style="color: #008b8b;">MERCHANTABILITY </span><span style="color: #b22222;">or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="linenr">21: </span><span style="color: #b22222;">% </span><span style="color: #008b8b;">GNU </span><span style="color: #b22222;">General Public License for more details.</span>
<span class="linenr">22: </span><span style="color: #b22222;">%</span>
<span class="linenr">23: </span><span style="color: #b22222;">% You should have received a copy of the GNU General Public License</span>
<span class="linenr">24: </span><span style="color: #b22222;">% along with this program.  If not, see &lt;<a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;.</span>
<span class="linenr">25: </span>
<span class="linenr">26: </span><span style="color: #b22222;">% $Log$</span>
<span class="linenr">27: </span><span style="color: #932092;">function</span> <span style="color: #0000ff;">verbose_disp</span>(<span style="color: #a0522d;">flag_verb</span>,<span style="color: #a0522d;">form</span>,<span style="color: #a0522d;">varargin</span>)
<span class="linenr">28: </span><span style="color: #b22222;">% little input checking</span>
<span class="linenr">29: </span><span style="color: #932092;">if</span>(nargin<span style="color: #228b22;">&lt;</span>2)
<span class="linenr">30: </span>    error(<span style="color: #8b2252;">'verbose_disp : wrong number of arguments'</span>);
<span class="linenr">31: </span><span style="color: #932092;">end</span>                                     <span style="color: #b22222;">% if(nargin&lt;2)</span>
<span class="linenr">32: </span><span style="color: #932092;">if</span>(<span style="color: #228b22;">~</span>ischar(form))
<span class="linenr">33: </span>    error(<span style="color: #8b2252;">'second argument should be a character string'</span>);
<span class="linenr">34: </span><span style="color: #932092;">end</span>                                 <span style="color: #b22222;">% if(~ischar(form))</span>
<span class="linenr">35: </span><span style="color: #b22222;">% if mode=verbose display the formatted string</span>
<span class="linenr">36: </span><span style="color: #932092;">if</span>(flag_verb)
<span class="linenr">37: </span>  s=sprintf(form,varargin{<span style="color: #228b22;">:</span>});
<span class="linenr">38: </span>  disp(s);
<span class="linenr">39: </span><span style="color: #932092;">end</span> <span style="color: #b22222;">% if(flag_verb)</span>
</pre>
</div>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/25/The-best-of-all-worlds---disp-+-sprintf.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[linux copy to clipboard]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150119/2015-01-19-linux-copy-to-clipboard-html" />
    <id>http://avigdev.github.io/blog/20150119/2015-01-19-linux-copy-to-clipboard-html</id>
    <updated>2015-01-19T00:10:05Z</updated>
    <published>2015-01-19T00:08:45Z</published>
    <category scheme="http://avigdev.github.io/blog" term="alias" />
    <category scheme="http://avigdev.github.io/blog" term="workflow" />
    <category scheme="http://avigdev.github.io/blog" term="osx" />
    <category scheme="http://avigdev.github.io/blog" term="linux" />
    <summary type="html"><![CDATA[linux copy to clipboard]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150119/2015-01-19-linux-copy-to-clipboard-html"><![CDATA[



<p>
Is it true that you have to give names to things to really appreciate and understand them? It's really one of these questions that are just too gross for answering a straight yes or no. 
</p>

<p>
When you think of this question, math comes to mind. I have little doubt that you must internalize dozens of definitions and the relations between them before you master differential geometry, or group theory. But do you need language to understand subtraction? The answer is - <a href="http://ocw.mit.edu/courses/brain-and-cognitive-sciences/9-00-introduction-to-psychology-fall-2004/lecture-notes/9-cognitive-development-how-do-children-think/">NO</a> . Babies do it intuitively. So there is some border beyond which things become too abstract, and we've got to give them names. But isn't my answer a tautology? Isn't "abstract" just the name of this phenomena of having to name something in order to understand it? Sure enough, if we were not so used to giving names to everything, we would have found lots of things "abstract". Helen Keller <a href="http://digital.library.upenn.edu/women/keller/life/life.html">writes</a> :
</p>

<p class="verse">
"my teacher placed my hand under the spout. As the cool stream gushed over one hand she spelled into the other the word water, first slowly, then rapidly. I stood still, my whole attention fixed upon the motions of her fingers. Suddenly I felt a misty consciousness as of something forgotten - a thrill of returning thought; and somehow the mystery of language was revealed to me. I knew then that "w-a-t-e-r" meant the wonderful cool something that was flowing over my hand"<br  />
</p>

<p>
Most of us don't think of the notion of water as abstract, but it's just a matter of experience. 
</p>

<p>
SO&#x2026; It didn't occur to me that I need to copy linux outputs to the clipboard, until I found out about xclip (keep your comments about the long intro to yourself, by the way&#x2026;). Now that I know about it, I also care about cases where I want the trailing '\n', and cases where I don't.
</p>

<p>
Here are my aliases for linux:
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xc</span>=<span style="color: #8b2252;">'xclip -selection clipboard'</span>
<span class="linenr">2: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xcn</span>=<span style="color: #8b2252;">'perl -ne "chomp();print" |xclip -selection clipboard'</span>
</pre>
</div>

<p>
And here they are for mac osx : 
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xc</span>=<span style="color: #8b2252;">"pbcopy"</span>
<span class="linenr">2: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xcn</span>=<span style="color: #8b2252;">"tr -d '\n' | pbcopy"</span>
</pre>
</div>

<p>
The two approaches for removing the newlines work equivalently on both systems.
</p>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/19/linux-copy-to-clipboard.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[latex automatic rotation]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150117/2015-01-17-latex-automatic-rotation-html" />
    <id>http://avigdev.github.io/blog/20150117/2015-01-17-latex-automatic-rotation-html</id>
    <updated>2015-01-17T17:43:02Z</updated>
    <published>2015-01-17T17:43:02Z</published>
    <category scheme="http://avigdev.github.io/blog" term="latex" />
    <summary type="html"><![CDATA[latex automatic rotation]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150117/2015-01-17-latex-automatic-rotation-html"><![CDATA[


<p>
The usual workflow with a latex document is latex-&gt;bibtex-&gt;latex-&gt;dvips-&gt;ps2pdf. There are some variations, on this theme. Anyway - when you use ps2pdf it tries to optimize space and sometimes rotates the figures. There's a whole story about how dvi includes figures as links to files and how dvips,ps2pdf plant this file inside the document. <b>Bottom line is</b> - we don't like automatic orientation of figures. Once we got it right, we want it to behave the same even if the document has changed. 
</p>

<p>
So&#x2026; 
to disable automatic rotation in ps2pdf (the source for this tip is <a href="http://textricks.blogspot.co.il/2010/01/ps2pdf-autorotate-switch-off.html">over here</a> ):
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>ps2pdf -dAutoRotatePages=/None
</pre>
</div>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/17/latex-automatic-rotation.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[LaTeX - please don't mix bibliography and figures]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150115/2015-01-15-latex-please-don-t-mix-bibliography-and-figures-html" />
    <id>http://avigdev.github.io/blog/20150115/2015-01-15-latex-please-don-t-mix-bibliography-and-figures-html</id>
    <updated>2015-01-15T12:22:42Z</updated>
    <published>2015-01-15T12:03:45Z</published>
    <category scheme="http://avigdev.github.io/blog" term="latex" />
    <summary type="html"><![CDATA[LaTeX - please don't mix bibliography and figures]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150115/2015-01-15-latex-please-don-t-mix-bibliography-and-figures-html"><![CDATA[


<p>
The weird mingling of figs and bibliography which is the default setting in LaTeX could be avoided by using the package <a href="http://www.ctan.org/pkg/placeins">"placeins"</a> . You could use several more barriers to make sure that all figures will not leak beyond certain position in text (for example - the end of a section).
</p>
<div class="org-src-container">

<pre class="src src-latex"><span class="linenr">1: </span><span style="color: #932092;">\usepackage</span>{<span style="color: #483d8b;">placeins</span>} <span style="color: #b22222;">% in the header</span>
<span class="linenr">2: </span>....
<span class="linenr">3: </span><span style="color: #932092;">\FloatBarrier</span> <span style="color: #b22222;">% this forces all figures to be presented before the bibl.</span>
<span class="linenr">4: </span><span style="color: #932092;">\bibliographystyle</span>{unsrt}
<span class="linenr">5: </span><span style="color: #932092;">\bibliography</span>{<span style="color: #483d8b;">gyre_ref</span>} <span style="color: #b22222;">% your bibtex file is probably named differently</span>
</pre>
</div>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/15/LaTeX---please-don't-mix-bibliography-and-figures.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[GMT's mysterious page dimension]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150114/2015-01-14-gmt-s-mysterious-page-dimension-html" />
    <id>http://avigdev.github.io/blog/20150114/2015-01-14-gmt-s-mysterious-page-dimension-html</id>
    <updated>2015-01-14T18:42:45Z</updated>
    <published>2015-01-14T18:40:56Z</published>
    <category scheme="http://avigdev.github.io/blog" term="matlab" />
    <category scheme="http://avigdev.github.io/blog" term="octave" />
    <summary type="html"><![CDATA[GMT's mysterious page dimension]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150114/2015-01-14-gmt-s-mysterious-page-dimension-html"><![CDATA[


<p>
<a href="http://gmt.soest.hawaii.edu">GMT</a> has been around for some time now. Their <a href="http://gmt.soest.hawaii.edu/gmt/map_geoip_all.png">"world domination map"</a> is a nice demonstration of its scripting capabilities and quality rendering. They only suffer from one disease. Well actually two. 
</p>

<ol class="org-ol">
<li>GMT doesn't allow gradual step-by-step fine tuning. While in matlab/octave you would use "plot(x,y)" just to see what happens, and afterwards play with the axis limits until you are satisfied, and so on - in GMT you have to worry about axis and the physical figure width and height from the very beginning. Quite a barrier I would say. That's where <a href="http://sourceforge.net/projects/octgmt/">octgmt</a> might come handy. It's an interface between octave and GMT that will create for you an initial script. 
</li>
<li>When you try to use the package, you are likely to just produce blank pages. That's because of the heavy dependence on some default printing page size, which is hidden from the user. Your plot should just fit in this mysterious default. This was actually discussed in their <a href="http://comments.gmane.org/gmane.comp.gis.gmt.user/13819">mailgroup</a> . Anyhow, you probably want to try the flag "&#x2013;PAPER_MEDIA=Custom_550x580" or "&#x2013;PS_MEDIA=Custom_550x580" (depending on the GMT version). 
</li>
</ol>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/14/GMT's-mysterious-page-dimension.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[matlab discrete colorbar]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150112/2015-01-12-matlab-discrete-colorbar-html" />
    <id>http://avigdev.github.io/blog/20150112/2015-01-12-matlab-discrete-colorbar-html</id>
    <updated>2015-01-12T20:03:14Z</updated>
    <published>2015-01-12T07:15:34Z</published>
    <category scheme="http://avigdev.github.io/blog" term="matlab" />
    <category scheme="http://avigdev.github.io/blog" term="octave" />
    <summary type="html"><![CDATA[matlab discrete colorbar]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150112/2015-01-12-matlab-discrete-colorbar-html"><![CDATA[


<p>
You shouldn't use the default "smooth" gradients of imagesc. The aesthetic side set aside, imagesc gives the wrong impression of an infinite resolution. While we are at it, let's get rid of the default nonesense y-axis opposite direction, and enable masking (whoaa. crazy.). 
</p>

<p>
verbose_disp is my version of disp/sprintf, combining the goods of both of them. You can safely remove these lines, or make up your own version of "verbosity" function. 
</p>

<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr">  1: </span><span style="color: #b22222;">% purpose : interface for imagesc for producing good </span>
<span class="linenr">  2: </span><span style="color: #b22222;">% heat maps</span>
<span class="linenr">  3: </span><span style="color: #b22222;">% syntax : myimagesc(x,y,w,minval,maxval,bin,[mask],[flag_verbose])</span>
<span class="linenr">  4: </span><span style="color: #b22222;">% x,y = vectors, representing the range of x and y axis.</span>
<span class="linenr">  5: </span><span style="color: #b22222;">% w = typically, a  field which depends on both x and y.</span>
<span class="linenr">  6: </span><span style="color: #b22222;">% minval, maxval = first and last values of w  which are color coded.</span>
<span class="linenr">  7: </span><span style="color: #b22222;">% values of w which go beyond minval and maxval will be represented by the</span>
<span class="linenr">  8: </span><span style="color: #b22222;">% same colorcoding like minval and maxval</span>
<span class="linenr">  9: </span><span style="color: #b22222;">% bin - an interval of values of w which has a unique color coding</span>
<span class="linenr"> 10: </span><span style="color: #b22222;">% mask - binary matrix for pixels that myimagesc grays out</span>
<span class="linenr"> 11: </span><span style="color: #b22222;">% flag_verbose - work in verbose mode</span>
<span class="linenr"> 12: </span><span style="color: #b22222;">% </span>
<span class="linenr"> 13: </span><span style="color: #b22222;">% dependencies : verbose_disp</span>
<span class="linenr"> 14: </span><span style="color: #b22222;">% </span>
<span class="linenr"> 15: </span><span style="color: #b22222;">% see also: imagesc</span>
<span class="linenr"> 16: </span>
<span class="linenr"> 17: </span>
<span class="linenr"> 18: </span><span style="color: #b22222;">% Copyright 2012 Avi Gozolchiani (http://tiny.cc/avigoz)</span>
<span class="linenr"> 19: </span><span style="color: #b22222;">% This program is free software: you can redistribute it and/or modify</span>
<span class="linenr"> 20: </span><span style="color: #b22222;">% it under the terms of the GNU General Public License as published by</span>
<span class="linenr"> 21: </span><span style="color: #b22222;">% the Free Software Foundation, either version 3 of the License, or</span>
<span class="linenr"> 22: </span><span style="color: #b22222;">% (at your option) any later version.</span>
<span class="linenr"> 23: </span><span style="color: #b22222;">%</span>
<span class="linenr"> 24: </span><span style="color: #b22222;">% This program is distributed in the hope that it will be useful,</span>
<span class="linenr"> 25: </span><span style="color: #b22222;">% but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="linenr"> 26: </span><span style="color: #b22222;">% </span><span style="color: #008b8b;">MERCHANTABILITY </span><span style="color: #b22222;">or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="linenr"> 27: </span><span style="color: #b22222;">% </span><span style="color: #008b8b;">GNU </span><span style="color: #b22222;">General Public License for more details.</span>
<span class="linenr"> 28: </span><span style="color: #b22222;">%</span>
<span class="linenr"> 29: </span><span style="color: #b22222;">% You should have received a copy of the GNU General Public License</span>
<span class="linenr"> 30: </span><span style="color: #b22222;">% along with this program.  If not, see &lt;<a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;.</span>
<span class="linenr"> 31: </span>
<span class="linenr"> 32: </span><span style="color: #b22222;">% $Log$</span>
<span class="linenr"> 33: </span><span style="color: #932092;">function</span> <span style="color: #a0522d;">h</span>=<span style="color: #0000ff;">myimagesc</span>(<span style="color: #a0522d;">x</span>,<span style="color: #a0522d;">y</span>,<span style="color: #a0522d;">w</span>,<span style="color: #a0522d;">minval</span>,<span style="color: #a0522d;">maxval</span>,<span style="color: #a0522d;">bin</span>,<span style="color: #a0522d;">varargin</span>)
<span class="linenr"> 34: </span><span style="color: #b22222;">%test case</span>
<span class="linenr"> 35: </span><span style="color: #b22222;">% bin=1e4;minval=-8e4;maxval=8e4;</span>
<span class="linenr"> 36: </span><span style="color: #b22222;">% x=0.1:0.1:100;</span>
<span class="linenr"> 37: </span><span style="color: #b22222;">% y=0:200;</span>
<span class="linenr"> 38: </span><span style="color: #b22222;">% [xx,yy]=ndgrid(x,y);</span>
<span class="linenr"> 39: </span><span style="color: #b22222;">% w=sin(xx).*xx.^2.*exp(0.01*yy);</span>
<span class="linenr"> 40: </span><span style="color: #b22222;">% w(:,195:198)=-70000;</span>
<span class="linenr"> 41: </span><span style="color: #b22222;">% w(15:18,:)=70000;</span>
<span class="linenr"> 42: </span><span style="color: #b22222;">% myimagesc(x,y,w,minval,maxval,bin)</span>
<span class="linenr"> 43: </span>accur=1e<span style="color: #228b22;">-</span>6; <span style="color: #b22222;">% to avoid roundoff problems when interpolating the colormap</span>
<span class="linenr"> 44: </span><span style="color: #b22222; font-weight: bold; text-decoration: overline;">%% check the inputs</span>
<span class="linenr"> 45: </span><span style="color: #932092;">if</span>(<span style="color: #228b22;">~</span>isempty(nargchk(6,8,nargin)))
<span class="linenr"> 46: </span>  error(<span style="color: #8b2252;">'esyntax : myimagesc(x,y,w,minval,maxval,bin,[mask],[flag_verbose])'</span>);
<span class="linenr"> 47: </span><span style="color: #932092;">end</span>
<span class="linenr"> 48: </span>nxx=length(x);
<span class="linenr"> 49: </span>nyy=length(y);
<span class="linenr"> 50: </span>[nxw,nyw]=size(w);
<span class="linenr"> 51: </span><span style="color: #932092;">if</span>(nxx<span style="color: #228b22;">~=</span>nxw <span style="color: #228b22;">||</span> nyy<span style="color: #228b22;">~=</span>nyw)
<span class="linenr"> 52: </span>    error(<span style="color: #8b2252;">'dimension mismatch'</span>);
<span class="linenr"> 53: </span><span style="color: #932092;">end</span> <span style="color: #b22222;">% if(nxx~=nxw || nyy~=nyw)</span>
<span class="linenr"> 54: </span><span style="color: #932092;">if</span>(minval<span style="color: #228b22;">&gt;=</span>maxval)
<span class="linenr"> 55: </span>    error(<span style="color: #8b2252;">'minval&gt;=maxval'</span>);
<span class="linenr"> 56: </span><span style="color: #932092;">end</span> <span style="color: #b22222;">% if(minval&gt;=maxval)</span>
<span class="linenr"> 57: </span><span style="color: #932092;">if</span>(bin<span style="color: #228b22;">&gt;=</span>(maxval<span style="color: #228b22;">-</span>minval)<span style="color: #228b22;">/</span>2.0)
<span class="linenr"> 58: </span>    error(<span style="color: #8b2252;">'color range spans less than two colors'</span>);
<span class="linenr"> 59: </span><span style="color: #932092;">end</span> <span style="color: #b22222;">% if(bin&gt;=(maxval-minval)/2.0)</span>
<span class="linenr"> 60: </span>mask=zeros(nxx,nyy);
<span class="linenr"> 61: </span>flag_mask=false;
<span class="linenr"> 62: </span><span style="color: #932092;">if</span>(nargin<span style="color: #228b22;">&gt;</span>6)
<span class="linenr"> 63: </span>    flag_mask=true;
<span class="linenr"> 64: </span>    mask=varargin{1};
<span class="linenr"> 65: </span>    <span style="color: #932092;">if</span>(<span style="color: #228b22;">~</span>all([nxx,nyy]<span style="color: #228b22;">==</span>size(mask)))
<span class="linenr"> 66: </span>        error(<span style="color: #8b2252;">'mask dimension does not match the other matrices'</span>);
<span class="linenr"> 67: </span>    <span style="color: #932092;">end</span> <span style="color: #b22222;">% if(~all([nxx,nyy]==size(mask)))</span>
<span class="linenr"> 68: </span><span style="color: #932092;">end</span> <span style="color: #b22222;">% if(nargin&gt;6)</span>
<span class="linenr"> 69: </span><span style="color: #b22222; font-weight: bold; text-decoration: overline;">%% parameters</span>
<span class="linenr"> 70: </span>flag_verbos=false;
<span class="linenr"> 71: </span><span style="color: #932092;">if</span>(nargin<span style="color: #228b22;">==</span>8)
<span class="linenr"> 72: </span>    flag_verbos=varargin{2};
<span class="linenr"> 73: </span><span style="color: #932092;">end</span> <span style="color: #b22222;">% if(nargin==8)</span>
<span class="linenr"> 74: </span>accur=1e<span style="color: #228b22;">-</span>5;
<span class="linenr"> 75: </span><span style="color: #b22222; font-weight: bold; text-decoration: overline;">%% prepare colormap</span>
<span class="linenr"> 76: </span>verbose_disp(flag_verbos,<span style="color: #8b2252;">'myimagesc : prepare colormap'</span>);
<span class="linenr"> 77: </span>colormap(<span style="color: #8b2252;">'default'</span>);
<span class="linenr"> 78: </span>cmap=colormap;
<span class="linenr"> 79: </span>n_origbins=size(cmap,1);
<span class="linenr"> 80: </span>W_bins=minval<span style="color: #228b22;">:</span>bin<span style="color: #228b22;">:</span>maxval;
<span class="linenr"> 81: </span>W_bins_ext=(minval<span style="color: #228b22;">-</span>bin<span style="color: #228b22;">/</span>2)<span style="color: #228b22;">:</span>bin<span style="color: #228b22;">:</span>(maxval<span style="color: #228b22;">+</span>(1<span style="color: #228b22;">+</span>accur)<span style="color: #228b22;">*</span>bin<span style="color: #228b22;">/</span>2);
<span class="linenr"> 82: </span>cscal=(minval<span style="color: #228b22;">:</span>(maxval<span style="color: #228b22;">-</span>minval)<span style="color: #228b22;">/</span>(n_origbins<span style="color: #228b22;">-</span>1)<span style="color: #228b22;">:</span>maxval)';
<span class="linenr"> 83: </span>newcmap=interp1(cscal,cmap,W_bins);
<span class="linenr"> 84: </span>newcmap=fix((newcmap<span style="color: #228b22;">-</span>0.5)<span style="color: #228b22;">/</span>accur<span style="color: #228b22;">-</span>sign(newcmap))<span style="color: #228b22;">*</span>accur<span style="color: #228b22;">+</span>0.5; <span style="color: #b22222;">%take care that we don't get out of the [0,1] range</span>
<span class="linenr"> 85: </span>colormap(newcmap);
<span class="linenr"> 86: </span><span style="color: #b22222; font-weight: bold; text-decoration: overline;">%% plot the heat map</span>
<span class="linenr"> 87: </span>verbose_disp(flag_verbos,<span style="color: #8b2252;">'myimagesc : plot the heat map'</span>);
<span class="linenr"> 88: </span>h=imagesc(x,y,w',W_bins_ext([1 length(W_bins_ext)]));hh=colorbar;grid on;
<span class="linenr"> 89: </span><span style="color: #228b22;">set</span>(<span style="color: #a0522d;">hh</span>,<span style="color: #8b2252;">'ytick'</span>,W_bins);
<span class="linenr"> 90: </span><span style="color: #b22222; font-weight: bold; text-decoration: overline;">%% plot the mask, if necessary</span>
<span class="linenr"> 91: </span>verbose_disp(flag_verbos,<span style="color: #8b2252;">'myimagesc : plot the mask, if necessary'</span>);
<span class="linenr"> 92: </span><span style="color: #932092;">if</span>(flag_mask)
<span class="linenr"> 93: </span>    <span style="color: #b22222;">% see</span>
<span class="linenr"> 94: </span>    <span style="color: #b22222;">% http://blogs.mathworks.com/steve/2009/02/18/image-overlay-using-transparency/</span>
<span class="linenr"> 95: </span>    <span style="color: #b22222;">% for details</span>
<span class="linenr"> 96: </span>    gray_lev=0.5<span style="color: #228b22;">*</span>ones(size(w')); <span style="color: #b22222;">% gray level for masking</span>
<span class="linenr"> 97: </span>    hold on;
<span class="linenr"> 98: </span>    gray=cat(3,gray_lev,gray_lev,gray_lev);
<span class="linenr"> 99: </span>    hh=imagesc(x,y,gray);
<span class="linenr">100: </span>    hold off;
<span class="linenr">101: </span>    <span style="color: #228b22;">set</span>(<span style="color: #a0522d;">hh</span>,<span style="color: #8b2252;">'alphadata'</span>,<span style="color: #228b22;">~</span>mask');
<span class="linenr">102: </span><span style="color: #932092;">end</span> <span style="color: #b22222;">% if(flag_mask)</span>
<span class="linenr">103: </span><span style="color: #b22222; font-weight: bold; text-decoration: overline;">%% invert the y-axis</span>
<span class="linenr">104: </span>verbose_disp(flag_verbos,<span style="color: #8b2252;">'myimagesc : invert the y-axis'</span>);
<span class="linenr">105: </span><span style="color: #228b22;">set</span>(<span style="color: #a0522d;">gca</span>,<span style="color: #8b2252;">'YDir'</span>,<span style="color: #8b2252;">'normal'</span>);
</pre>
</div>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/12/matlab-discrete-colorbar.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[matlab subplots packed densely together]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150111/2015-01-11-matlab-subplots-packed-densely-together-html" />
    <id>http://avigdev.github.io/blog/20150111/2015-01-11-matlab-subplots-packed-densely-together-html</id>
    <updated>2015-01-12T20:03:08Z</updated>
    <published>2015-01-11T07:15:21Z</published>
    <category scheme="http://avigdev.github.io/blog" term="xmgr" />
    <category scheme="http://avigdev.github.io/blog" term="matlab" />
    <category scheme="http://avigdev.github.io/blog" term="octave" />
    <category scheme="http://avigdev.github.io/blog" term="gmt" />
    <summary type="html"><![CDATA[matlab subplots packed densely together]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150111/2015-01-11-matlab-subplots-packed-densely-together-html"><![CDATA[



<p>
During significant portion of my grad-school I had to travel a lot. I therefore couldn't rely on hooking to the university matlab license, so I searched for free alternatives. While you could use a lot of good projects, such as <a href="https://www.gnu.org/software/octave/">octave</a> to crunch your numbers, it seems to me that making beautiful figures is not so easy.
</p>

<p>
I got used to plotting with the excellent packages of <a href="http://gmt.soest.hawaii.edu">GMT</a> . I even wrote <a href="https://sourceforge.net/projects/octgmt/">some little octave wrapper functions</a> around GMT, since it's easy to get intimidated by their too elaborate man pages. You could still try them out, though GMT has been working lately on an official <a href="http://gmt.soest.hawaii.edu/projects/gmt-matlab-octave-api">matlab API</a> for you (they do have mature API for c++/Fortran). I didn't try it myself, yet. Another option is good old <a href="http://plasma-gate.weizmann.ac.il/Grace/">xmgr</a> . Both of them produce great imagery, but they have their limitations at times. 
</p>

<p>
The one point where matlab excels is <i>better set of default parameters</i>. You don't have to worry so much about the line thicknesses, page width etc., as much as in the other options mentioned above. The cons side, obviously, is when you don't want the defaults. Easy things like packing your subplots close are not so easy in matlab. It's of course, nevertheless, still possible. Mainly with axis/plot handles.
</p>

<p>
Here's how you do it : 
first let's create our figs:
</p>
<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr">1: </span>nsubs=3;
<span class="linenr">2: </span><span style="color: #932092;">for</span> <span style="color: #a0522d;">isub</span>=<span style="color: #008b8b;">1:nsubs</span>
<span class="linenr">3: </span> subplot(nsubs,1,isub);
<span class="linenr">4: </span> plot(rands(3,100)');
<span class="linenr">5: </span> <span style="color: #228b22;">set</span>(<span style="color: #a0522d;">gca</span>,<span style="color: #8b2252;">'fontsize'</span>,16);
<span class="linenr">6: </span><span style="color: #932092;">end</span> <span style="color: #b22222;">% for </span><span style="color: #b22222;">i</span><span style="color: #b22222;">=</span><span style="color: #b22222;">1:nsubs</span>
<span class="linenr">7: </span>savefigs(<span style="color: #8b2252;">'nopack_subplots'</span>,<span style="color: #8b2252;">'save demo of packed graphs'</span>,[]);
</pre>
</div>

<p>
that's the result: 
</p>


<div id="fig:nopack" class="figure">
<p><img src="/media/2015-01-11-matlab-subplots-packed-densely-together/nopack_subplots.png" width="80%"> 
</p>
<p><span class="figure-number">Figure 1:</span> before</p>
</div>

<p>
now , lets pack them:
</p>
<div class="org-src-container">

<pre class="src src-matlab"><span class="linenr"> 1: </span>packing_const=0.06
<span class="linenr"> 2: </span><span style="color: #932092;">for</span> <span style="color: #a0522d;">isub</span>=<span style="color: #008b8b;">1:nsubs</span>
<span class="linenr"> 3: </span> h=subplot(nsubs,1,isub);p = <span style="color: #228b22;">get</span>(<span style="color: #a0522d;">h</span>, <span style="color: #8b2252;">'pos'</span>);
<span class="linenr"> 4: </span> <span style="color: #932092;">if</span>(isub<span style="color: #228b22;">&lt;</span>nsubs)
<span class="linenr"> 5: </span>  <span style="color: #228b22;">set</span>(<span style="color: #a0522d;">gca</span>,<span style="color: #8b2252;">'fontsize'</span>,16,<span style="color: #8b2252;">'XTickLabelMode'</span>, <span style="color: #8b2252;">'Manual'</span>,<span style="color: #8b2252;">'XTickLabel'</span>, []);
<span class="linenr"> 6: </span> <span style="color: #932092;">else</span> <span style="color: #b22222;">%  if(isub&lt;nsubs)</span>
<span class="linenr"> 7: </span>  <span style="color: #228b22;">set</span>(<span style="color: #a0522d;">gca</span>,<span style="color: #8b2252;">'fontsize'</span>,16);
<span class="linenr"> 8: </span> <span style="color: #932092;">end</span> <span style="color: #b22222;">%  if(isub&lt;nsubs) ... else ...</span>
<span class="linenr"> 9: </span> <span style="color: #228b22;">set</span>(<span style="color: #a0522d;">h</span>,<span style="color: #8b2252;">'pos'</span>,[p(<span style="color: #a0522d;">1</span>) p(<span style="color: #a0522d;">2</span>) p(<span style="color: #a0522d;">3</span>) p(<span style="color: #a0522d;">4</span>)<span style="color: #228b22;">+</span>packing_const]);
<span class="linenr">10: </span><span style="color: #932092;">end</span> <span style="color: #b22222;">% for </span><span style="color: #b22222;">isub</span><span style="color: #b22222;">=</span><span style="color: #b22222;">1:nsubs</span>
<span class="linenr">11: </span>savefigs(<span style="color: #8b2252;">'pack_subplots'</span>,<span style="color: #8b2252;">'save demo of packed graphs'</span>,[]);
</pre>
</div>

<p>
that's our "after" exhibit : 
</p>


<div id="fig:pack" class="figure">
<p><img src="/media/2015-01-11-matlab-subplots-packed-densely-together/pack_subplots.png" width="80%"> 
</p>
<p><span class="figure-number">Figure 2:</span> after</p>
</div>

<p>
The "savefigs" function is non standard. Its aim is to save images in fig/eps/png formats at once, and generate README file and a mat file on the fly, with consistent names. 
</p>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/11/matlab-subplots-packed-densely-together.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
