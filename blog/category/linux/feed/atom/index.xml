<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">Avi Gozolchiani אבי גוזולצני</title>
  <subtitle type="text">Environmental Physics at Ben Gurion University</subtitle>

  <updated>2015-05-04T14:35:38Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog" />
  <id>http://avigdev.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://avigdev.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Alternative to keyword substitution in git, using org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150430/2015-04-30-alternative-to-keyword-substitution-in-git-using-org-mode-html" />
    <id>http://avigdev.github.io/blog/20150430/2015-04-30-alternative-to-keyword-substitution-in-git-using-org-mode-html</id>
    <updated>2015-04-30T14:08:29Z</updated>
    <published>2015-04-30T13:52:36Z</published>
    <category scheme="http://avigdev.github.io/blog" term="orgmode" />
    <category scheme="http://avigdev.github.io/blog" term="max" />
    <category scheme="http://avigdev.github.io/blog" term="git" />
    <category scheme="http://avigdev.github.io/blog" term="linux" />
    <summary type="html"><![CDATA[Alternative to keyword substitution in git, using org-mode]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150430/2015-04-30-alternative-to-keyword-substitution-in-git-using-org-mode-html"><![CDATA[


<p>
Linus Torvalds <a href="http://www.gelato.unsw.edu.au/archives/git/0610/28891.html">thinks</a> that cvs-style keyword substitution (like having the string \(Log\) substituted by actual cvs logs in text file) is idiotic. He's got some points, like avoiding mess in binary files.
 I think that seeing a log in my <a href="http://orgmode.org">org-files</a> is not that bad, and it gives me a notion of the gradual advances that were made. I found the following lines to be non-intrusive enough to make them an almost keyword-substitution-substitution.
</p>

<div class="org-src-container">

<pre class="src src-example"># git logging 
#+BEGIN_SRC sh :exports results :results raw drawer
git log | sed -e "s/^/# /g"
\#+END_SRC
</pre>
</div>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/04/30/Alternative-to-keyword-substitution-in-git,-using-org-mode.org">org-mode source</a><p>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Backups on OS X]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150319/2015-03-19-backups-on-os-x-html" />
    <id>http://avigdev.github.io/blog/20150319/2015-03-19-backups-on-os-x-html</id>
    <updated>2015-03-26T17:17:46Z</updated>
    <published>2015-03-19T18:31:45Z</published>
    <category scheme="http://avigdev.github.io/blog" term="mac" />
    <category scheme="http://avigdev.github.io/blog" term="linux" />
    <summary type="html"><![CDATA[Backups on OS X]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150319/2015-03-19-backups-on-os-x-html"><![CDATA[



<p>
Back to <a href="http://avigdev.github.io/blog/20150319/2015-03-19-backups-html/">backing up</a> (no pun intended), OS X uses a launchd system rather than "cron.daily". If you are like me, you probably don't want to know why and you don't care. You just want a cron.daily approach, and a way to know whether it worked or not. 
</p>

<p>
So put your bash script from <a href="http://avigdev.github.io/blog/20150319/2015-03-19-backups-html/">here</a> somewhere on your system, and put the following script in your ~/Library/LaunchAgents/ ,  with a name like me.bckup.daily.plist (though the name should not matter, or so they tell) : 
</p>
<pre class="example">
<span class="linenr"> 1: </span>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
<span class="linenr"> 2: </span>&lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/
<span class="linenr"> 3: </span>DTDs/PropertyList-1.0.dtd"&gt;
<span class="linenr"> 4: </span>&lt;plist version="1.0"&gt;
<span class="linenr"> 5: </span>&lt;dict&gt;
<span class="linenr"> 6: </span>&lt;key&gt;Label&lt;/key&gt;
<span class="linenr"> 7: </span>&lt;string&gt;me.bckup.daily&lt;/string&gt;
<span class="linenr"> 8: </span>&lt;key&gt;LowPriorityIO&lt;/key&gt;
<span class="linenr"> 9: </span>&lt;true/&gt;
<span class="linenr">10: </span>&lt;key&gt;Nice&lt;/key&gt;
<span class="linenr">11: </span>&lt;integer&gt;12&lt;/integer&gt;
<span class="linenr">12: </span>&lt;key&gt;Program&lt;/key&gt;
<span class="linenr">13: </span>&lt;string&gt;/path/to/your/script/bckup_to_hd&lt;/string&gt;
<span class="linenr">14: </span>&lt;key&gt;StartCalendarInterval&lt;/key&gt;
<span class="linenr">15: </span>&lt;dict&gt;
<span class="linenr">16: </span>&lt;key&gt;Hour&lt;/key&gt;
<span class="linenr">17: </span>&lt;integer&gt;16&lt;/integer&gt;
<span class="linenr">18: </span>&lt;key&gt;Minute&lt;/key&gt;
<span class="linenr">19: </span>&lt;integer&gt;49&lt;/integer&gt;
<span class="linenr">20: </span>&lt;/dict&gt;
<span class="linenr">21: </span>&lt;key&gt;StandardErrorPath&lt;/key&gt;
<span class="linenr">22: </span>&lt;string&gt;/path/to/log_err_file.txt&lt;/string&gt;
<span class="linenr">23: </span>&lt;key&gt;StandardOutPath&lt;/key&gt;
<span class="linenr">24: </span>&lt;string&gt;/path/to/log_out_file.txt&lt;/string&gt;
<span class="linenr">25: </span>&lt;/dict&gt;
<span class="linenr">26: </span>&lt;/plist&gt;
</pre>
<p>
with the obvious ammendments of the exact time you want it to be launched every day, and your exact absolute paths.
</p>

<p>
To begin its action for the first time, either logout and login or :
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>launchctl load me.bckup.daily.plist
</pre>
</div>

<p>
If something went wrong, you could use <code>launchctl unload</code> instead of <code>load</code> , get things straight and <code>load</code> again.
</p>

<p>
Now, how do you know if something went wrong ? 
</p>

<p>
first, you have your log files /path/to/log_*_file.txt . Second, you could search for clues in /private/var/log/system.log in the time you designated.
</p>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/19/Backups-on-OS-X.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Backups]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150319/2015-03-19-backups-html" />
    <id>http://avigdev.github.io/blog/20150319/2015-03-19-backups-html</id>
    <updated>2015-03-19T18:36:19Z</updated>
    <published>2015-03-19T18:31:45Z</published>
    <category scheme="http://avigdev.github.io/blog" term="mac" />
    <category scheme="http://avigdev.github.io/blog" term="linux" />
    <summary type="html"><![CDATA[Backups]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150319/2015-03-19-backups-html"><![CDATA[



<p>
Backuping should be - routine,automatic, and simple. I'm using the following: 
</p>

<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>rsync --force --ignore-errors --delete <span style="color: #8b2252;">\</span>
<span class="linenr">2: </span> --exclude /path/to/*excluded_files* <span style="color: #8b2252;">\</span>
<span class="linenr">3: </span> --backup-dir=<span style="color: #ff40ff;">`date +%Y-%m`</span> -avb /home/yourname/ <span style="color: #8b2252;">\</span>
<span class="linenr">4: </span> /path/to/your/BCK/hd
</pre>
</div>

<p>
Each month you get a new directory <code>YYYYmm</code> (year+month) on your backup hard drive, for files that have been changed/deleted during this month. You should probably delete it after a few months, but sometimes you will want to recover some data which was mistakenly deleted. Otherwise, all other files (which weren't deleted or modified) are just duplicated to the backup hd. 
</p>

<p>
If you are using linux, you should probably put this script in your <code>/etc/cron.daily/</code> directory. And give it the correct permissions.
</p>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/19/Backups.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Screen - unique logs for each run]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150129/2015-01-29-screen-unique-logs-for-each-run-html" />
    <id>http://avigdev.github.io/blog/20150129/2015-01-29-screen-unique-logs-for-each-run-html</id>
    <updated>2015-01-29T01:58:34Z</updated>
    <published>2015-01-29T01:58:34Z</published>
    <category scheme="http://avigdev.github.io/blog" term="workflow" />
    <category scheme="http://avigdev.github.io/blog" term="linux" />
    <summary type="html"><![CDATA[Screen - unique logs for each run]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150129/2015-01-29-screen-unique-logs-for-each-run-html"><![CDATA[



<p>
<a href="https://wiki.archlinux.org/index.php/GNU_Screen">Screen</a> is a little wrap around linux shell that enables detaching and logging out while the session you created is still running. It could be used for lots of different purposes, and running an intensive computation on a remote computer is an obvious example.
</p>

<p>
You would normally do :
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>screen -md -L -S session_name your_program
</pre>
</div>

<p>
-md = detach immediately after running, and return to the current terminal session
-L = create a log file
-S = create meaningful name for your session
</p>

<p>
To check the stat of your sessions you will use:
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span>screen -ls
</pre>
</div>

<p>
To have different log files with unique names for different sessions, you need to create a <code>~/.screenrc</code> file, with the following single line
</p>
<pre class="example">
logfile screenlog-%Y%m%d-%c:%s
</pre>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/29/Screen---unique-logs-for-each-run.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://avigdev.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[linux copy to clipboard]]></title>
    <link rel="alternate" type="text/html" href="http://avigdev.github.io/blog/20150119/2015-01-19-linux-copy-to-clipboard-html" />
    <id>http://avigdev.github.io/blog/20150119/2015-01-19-linux-copy-to-clipboard-html</id>
    <updated>2015-01-19T00:10:05Z</updated>
    <published>2015-01-19T00:08:45Z</published>
    <category scheme="http://avigdev.github.io/blog" term="alias" />
    <category scheme="http://avigdev.github.io/blog" term="workflow" />
    <category scheme="http://avigdev.github.io/blog" term="osx" />
    <category scheme="http://avigdev.github.io/blog" term="linux" />
    <summary type="html"><![CDATA[linux copy to clipboard]]></summary>
    <content type="html" xml:base="http://avigdev.github.io/blog/20150119/2015-01-19-linux-copy-to-clipboard-html"><![CDATA[



<p>
Is it true that you have to give names to things to really appreciate and understand them? It's really one of these questions that are just too gross for answering a straight yes or no. 
</p>

<p>
When you think of this question, math comes to mind. I have little doubt that you must internalize dozens of definitions and the relations between them before you master differential geometry, or group theory. But do you need language to understand subtraction? The answer is - <a href="http://ocw.mit.edu/courses/brain-and-cognitive-sciences/9-00-introduction-to-psychology-fall-2004/lecture-notes/9-cognitive-development-how-do-children-think/">NO</a> . Babies do it intuitively. So there is some border beyond which things become too abstract, and we've got to give them names. But isn't my answer a tautology? Isn't "abstract" just the name of this phenomena of having to name something in order to understand it? Sure enough, if we were not so used to giving names to everything, we would have found lots of things "abstract". Helen Keller <a href="http://digital.library.upenn.edu/women/keller/life/life.html">writes</a> :
</p>

<p class="verse">
"my teacher placed my hand under the spout. As the cool stream gushed over one hand she spelled into the other the word water, first slowly, then rapidly. I stood still, my whole attention fixed upon the motions of her fingers. Suddenly I felt a misty consciousness as of something forgotten - a thrill of returning thought; and somehow the mystery of language was revealed to me. I knew then that "w-a-t-e-r" meant the wonderful cool something that was flowing over my hand"<br  />
</p>

<p>
Most of us don't think of the notion of water as abstract, but it's just a matter of experience. 
</p>

<p>
SO&#x2026; It didn't occur to me that I need to copy linux outputs to the clipboard, until I found out about xclip (keep your comments about the long intro to yourself, by the way&#x2026;). Now that I know about it, I also care about cases where I want the trailing '\n', and cases where I don't.
</p>

<p>
Here are my aliases for linux:
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xc</span>=<span style="color: #8b2252;">'xclip -selection clipboard'</span>
<span class="linenr">2: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xcn</span>=<span style="color: #8b2252;">'perl -ne "chomp();print" |xclip -selection clipboard'</span>
</pre>
</div>

<p>
And here they are for mac osx : 
</p>
<div class="org-src-container">

<pre class="src src-sh"><span class="linenr">1: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xc</span>=<span style="color: #8b2252;">"pbcopy"</span>
<span class="linenr">2: </span><span style="color: #483d8b;">alias</span> <span style="color: #a0522d;">xcn</span>=<span style="color: #8b2252;">"tr -d '\n' | pbcopy"</span>
</pre>
</div>

<p>
The two approaches for removing the newlines work equivalently on both systems.
</p>
<p>Copyright (C) 2015 by Avi Gozolchiani. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/19/linux-copy-to-clipboard.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
